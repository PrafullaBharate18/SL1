#DFS code

def dfs(graph, vertex, visited):
    visited.add(vertex)
    print(vertex, end=' ')

    for neighbor in graph[vertex]:
        if neighbor not in visited:
            dfs(graph, neighbor, visited)

# Function to build the graph from user input
def build_graph():
    num_vertices = int(input("Enter the number of vertices: "))
    num_edges = int(input("Enter the number of edges: "))
    
    graph = {i: [] for i in range(num_vertices)}
    
    print("Enter the edges (vertex1 vertex2):")
    for _ in range(num_edges):
        v1, v2 = map(int, input().split())
        graph[v1].append(v2)
        graph[v2].append(v1) # Because it's an undirected graph
    
    return graph

# Main function to execute DFS
if __name__ == "__main__":
    graph = build_graph()
    visited = set()
    start_vertex = int(input("Enter the starting vertex: "))
    print(f"Depth First Search starting from vertex {start_vertex}:")
    dfs(graph, start_vertex, visited)


output:
Enter the number of vertices: 6
Enter the number of edges: 6
Enter the edges (vertex1 vertex2):
0 1 
0 2
1 3
1 4
2 5
3 4
Enter the starting vertex: 0
Depth First Search starting from vertex 0:
0 1 3 4 2 5 





####BFS code

from collections import deque


def bfs(graph, start_vertex):
    visited = set()
    queue = deque([start_vertex])
    visited.add(start_vertex)

    while queue:
        vertex = queue.popleft()
        print(vertex, end=' ')

        for neighbor in graph[vertex]:
            if neighbor not in visited:
                visited.add(neighbor)
                queue.append(neighbor)


# Function to build the graph from user input
def build_graph():
    num_vertices = int(input("Enter the number of vertices: "))
    num_edges = int(input("Enter the number of edges: "))

    graph = {i: [] for i in range(num_vertices)}

    print("Enter the edges (vertex1 vertex2):")
    for _ in range(num_edges):
        v1, v2 = map(int, input().split())
        graph[v1].append(v2)
        graph[v2].append(v1)  # Because it's an undirected graph

    return graph


# Main function to execute BFS
if __name__ == "__main__":
    graph = build_graph()
    start_vertex = int(input("Enter the starting vertex: "))
    print(f"Breadth First Search starting from vertex {start_vertex}:")
    bfs(graph, start_vertex)